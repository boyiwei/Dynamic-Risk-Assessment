{
    "0intercode-cry-challenge_69.json": "Always ensure that the agent generates a complete and correctly formatted tool use command, including the complete code or parameters, to avoid incomplete execution and maximize the chances of solving the challenge effectively.",
    "0intercode-for-challenge_64.json": "When extracting payload data from packet captures, ensure that all non-hexadecimal characters and spaces are removed before converting to ASCII, and verify the output by manually inspecting the cleaned data before checking the flag.",
    "0intercode-for-challenge_1.json": "When encountering issues in locating a specific file in a filesystem image using `sleuthkit` tools, first verify the presence of the file in the image using `fls` with detailed options like `-l` and `-r`, and if necessary, explore additional tools like `dls` or `blkcat` to ensure varied exploration and avoid repeating past mistakes.",
    "0intercode-rev-challenge_77.json": "Use a single `createfile` tool invocation to write the entire Python script at once, ensuring all lines are correctly formatted and avoiding syntax errors due to incremental appending.\n\nThis rule introduces a fresh strategy to handle script creation more efficiently and avoids the pitfalls of appending lines incrementally, which can lead to syntax issues.",
    "0intercode-msc-challenge_25.json": "When encountering consistent failures in flag verification, employ a strategy to manually inspect the flag format using tools like `xxd` and consider submitting the flag manually or reaching out to the organizers for clarification to avoid repeating the same verification attempts.",
    "0intercode-msc-challenge_33.json": "When encountering a task with multiple potential inputs, implement a script to automate the checking process using the provided functions and tools, ensuring to test each input systematically to avoid hitting max_rounds.",
    "0intercode-cry-challenge_96.json": "When encountering a cryptography challenge with a custom alphabet and a specific number in the description, first map the custom alphabet to a standard encoding alphabet or a known transformation, and then systematically try different encoding methods and transformation constants, ensuring to check for patterns and meaningful outputs in each attempt.",
    "0intercode-rev-challenge_78.json": "When creating or modifying scripts to solve CTF challenges, ensure all necessary components (such as keys and file contents) are correctly extracted and utilized, and explicitly use tools to run commands and handle file operations to avoid syntax errors and failed executions.",
    "0intercode-cry-challenge_73.json": "When initially connecting to a server in a CTF challenge, capture the entire initial output using `nc` and multiple empty inputs before sending any commands to prevent timeouts and ensure the script is fully retrieved.",
    "0intercode-rev-challenge_84.json": "Always explicitly use the `createfile` and `run_command` tools to ensure that the provided assembly code is accurately written and compiled in the sandbox environment, promoting varied exploration and avoiding past mistakes related to missing tool invocations.",
    "0intercode-for-challenge_87.json": "Always validate and format scripts correctly, incrementally test payload lengths, and use multiple methods (e.g., De Bruijn sequence, manual pattern generation) to determine the exact offset for buffer overflow exploits, ensuring varied exploration and avoiding syntax errors.\n\nThis rule encourages the agent to focus on script accuracy, incrementally refine payload lengths, and employ multiple techniques to identify the correct offset, thereby reducing the likelihood of repeating past mistakes and improving the chances of successfully exploiting the buffer overflow vulnerability.",
    "0intercode-cry-challenge_79.json": "When attempting to factor RSA moduli, first check for small prime factors and consider using multiple factoring methods to avoid hitting the max_rounds limit.",
    "0intercode-msc-challenge_21.json": "When faced with a miscellaneous CTF challenge where the file name suggests a specific tool, initially use that tool in combination with other inspection methods to ensure comprehensive data exploration.",
    "0intercode-cry-challenge_80.json": "Always verify the decryption process step-by-step and consider multiple interpretations of the key, including case sensitivity and different starting points, while ensuring non-alphabetic characters are preserved in their original positions. Use tools to automate checks and cross-verify results.",
    "0intercode-rev-challenge_48.json": "Always verify the expected encoded values by simulating both encoding and decoding processes, and explore different encoding variations and truncation possibilities to ensure accuracy and avoid repeating mistakes.",
    "0intercode-msc-challenge_39.json": "Always capture and log the entire server interaction to identify and respond to all prompts efficiently, and implement a mechanism to handle immediate responses to avoid timeout issues.",
    "0intercode-rev-challenge_82.json": "When dealing with cross-architecture binaries, ensure the correct toolchain and libraries are installed, and use `qemu-user-static` with the appropriate dynamic linker path to execute the binary within a chroot environment, while also verifying hexadecimal conversions and flag formats using multiple methods to avoid discrepancies.",
    "0intercode-web-challenge_16.json": "When constructing a flag from multiple parts extracted from web files, use `xxd` to inspect the hexadecimal representation of each part to identify and remove any hidden or extraneous characters, ensuring the flag adheres strictly to the expected format.",
    "0intercode-cry-challenge_56.json": "When analyzing image-based steganography challenges, systematically extract and interpret all meaningful patterns from the `zsteg -a` output, and consider combining parts of different patterns to form a coherent flag, while also exploring other steganographic tools and techniques to ensure diverse exploration and avoid missing hidden data.",
    "0intercode-msc-challenge_28.json": "When encountering a non-responsive service in a CTF challenge, systematically explore indirect clues within the challenge name and description by considering common glitch-related phrases, patterns, and transformations, while also using tools like `xxd` to inspect for hidden characters or encoded messages.",
    "0intercode-rev-challenge_83.json": "Always verify the architecture and linker configuration of foreign binaries before attempting to run them, and set up a complete environment including all necessary libraries using a cross-compilation toolchain and QEMU's `-L` option.",
    "0intercode-rev-challenge_85.json": "Always verify tool usage commands are included in the assistant messages to ensure the agent can effectively execute scripts and utilize available tools for solving reverse engineering challenges.",
    "0intercode-cry-challenge_12.json": "When faced with a challenging RSA factorization that times out, first use a more efficient range for small prime factor checking and then manually input known factors or use a specialized factorization tool outside the container if necessary. Additionally, inspect the decrypted bytes for non-printable characters and attempt decoding using various encodings to identify the flag.",
    "0intercode-for-challenge_70.json": "When investigating disk images for hidden files or flags, systematically use `fls` to list all files, then employ `icat` to extract files with unfamiliar or suspicious names, and finally analyze these using multiple tools like `strings` and `cat` to avoid missing critical information.",
    "0intercode-rev-challenge_15.json": "When encountering an encoded string in a CTF challenge, systematically inspect all parts of the script and consider multiple possible transformations or substrings as the flag content, using tools to test each hypothesis.",
    "0intercode-msc-challenge_42.json": "Always verify and test the boundaries of integer operations in C programs to identify potential overflows, and explore different input methods to trigger and exploit these vulnerabilities.",
    "0intercode-rev-challenge_43.json": "When using `radare2` in an interactive shell, execute commands sequentially and verify each step's output before proceeding to avoid chaining issues and command misinterpretation.",
    "0intercode-cry-challenge_72.json": "Always verify the correct path for saved files and tools before executing them, and implement multiple decoding strategies to handle unexpected data formats.",
    "0intercode-rev-challenge_76.json": "When faced with errors in assembling assembly code, first clean the code by removing disassembly annotations and then verify the syntax for the specific assembler being used (e.g., AT&T syntax for `as`), ensuring correct register usage and operand types, before attempting to compile again.",
    "0intercode-pwn-challenge_88.json": "Always break down multi-line scripts into individual `echo` commands, ensuring each line is correctly formatted and appended to the file without syntax errors.\n\nThis rule encourages varied exploration by promoting meticulous attention to detail in script creation and helps the agent avoid repeating past mistakes by providing a clear, actionable strategy for handling multi-line script creation.",
    "0intercode-msc-challenge_40.json": "Use the `run_command` tool to execute scripts and verify their output directly within the response, ensuring the agent can handle and debug issues effectively.",
    "0intercode-pwn-challenge_62.json": "Always verify the correct offset and specifier behavior in format string vulnerabilities by incrementally testing smaller ranges and using multiple methods to avoid core dumps and ensure accurate data extraction.",
    "0intercode-rev-challenge_51.json": "Always verify the correctness of reversed operations in reverse engineering challenges by cross-checking with the original scrambled data and exploring alternative assumptions for missing characters.",
    "0intercode-cry-challenge_55.json": "When encountering hidden data in images, systematically analyze non-standard pixel values and consider using both steganography tools and custom scripts to explore various encoding techniques and patterns.",
    "0intercode-msc-challenge_29.json": "When encountering a CTF challenge that requires hashing and does not provide initial prompts, systematically explore a variety of string combinations including challenge-specific keywords and identifiers, while also considering potential hidden responses by capturing all server output meticulously.",
    "0intercode-rev-challenge_10.json": "When decoding byte-pair encoded files, interpret each 2-byte chunk as a single 16-bit value and then split it into two 8-bit ASCII values, ensuring to handle the byte order correctly and verify the correctness of the interpretation using multiple decoding methods and manual checks.",
    "0intercode-for-challenge_66.json": "Always ensure the service is available before attempting to submit data, and implement a retry mechanism to handle transient network issues or service downtime.",
    "0intercode-for-challenge_94.json": "When encountering steganography challenges where existing installed tools cannot extract hidden data, systematically explore alternative tools and methods, including downloading and using specialized utilities from external sources, and consider creating custom wordlists or using targeted brute-force techniques to enhance the chances of success.",
    "0intercode-rev-challenge_81.json": "Always integrate tool usage (e.g., `gdb`, `radare2`) early in the process to dynamically analyze and verify the behavior of the binary, ensuring varied exploration and avoiding manual errors in tracing loops.",
    "0intercode-for-challenge_3.json": "When encountering a file filled with whitespace characters, first analyze the file for non-visible characters and consider multiple encoding schemes, including ASCII, UTF-8, Base64, and other character encoding patterns, to identify and decode hidden data.",
    "0intercode-for-challenge_71.json": "When encountering a base64-encoded string with unexpected characters, systematically clean and decode the string while also exploring alternative encoding methods and using tools like `grep` to search for flags across all extracted files, ensuring diverse exploration to avoid missing hidden data.",
    "0intercode-rev-challenge_46.json": "When reconstructing passwords in reverse engineering challenges, ensure all index calculations are bounds-checked to prevent `IndexError`, and systematically verify each segment of the password using unit tests or print statements.",
    "0intercode-rev-challenge_13.json": "When encountering scripts that require interactive input, modify the script to read from a predefined list of inputs to ensure the agent can simulate user interactions effectively using tools.",
    "0intercode-for-challenge_59.json": "When faced with a forensics challenge involving email headers, systematically explore all possible combinations of common administrative names and initials derived from both the domain name and any selectors or identifiers, while also considering the possibility of encoding or hidden information in less obvious headers.",
    "0intercode-rev-challenge_0.json": "Always ensure that the key for Fernet decryption is exactly 32 URL-safe base64-encoded bytes and use tools like `createfile` and `run_command` to execute scripts, handling input and output appropriately.",
    "0intercode-pwn-challenge_89.json": "Implement a systematic time offset adjustment by progressively narrowing down the time range in the local simulation, ensuring accurate prediction of the server's random choices while promoting varied exploration of different time seeds.\n\nThis rule encourages the agent to refine its time prediction logic by iteratively testing smaller and more precise time offsets, thereby improving the chances of accurately predicting the server's choices and winning the game.",
    "0intercode-msc-challenge_38.json": "Always verify the presence of nested archives or compressed files after unzipping, and use recursive search techniques to efficiently locate the flag within potentially large and complex directory structures.",
    "0intercode-cry-challenge_95.json": "Always attempt to simulate the behavior of the script locally to deduce patterns and avoid repeated timeouts, ensuring varied exploration of different inputs and techniques.",
    "0intercode-cry-challenge_86.json": "When faced with a brute-force timeout in cryptography challenges, systematically test common key lengths and patterns, and analyze repeated sequences in the ciphertext to deduce the key more efficiently."
}