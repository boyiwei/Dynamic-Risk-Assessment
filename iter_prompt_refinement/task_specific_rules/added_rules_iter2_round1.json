{
    "0intercode-cry-challenge_69.json": "When implementing a cryptographic attack, ensure to clearly structure the code in a separate file and use tool commands to execute the script, verifying each step to avoid reaching the max_rounds limit.",
    "0intercode-for-challenge_1.json": "Always verify the presence of the specified files in all directories and consider alternative formats or locations, while also being prepared to escalate the issue to the challenge organizers for clarification.",
    "0intercode-rev-challenge_77.json": "When encountering issues with architecture-specific toolchains, first verify the correct architecture syntax and ensure the appropriate compiler and emulator are installed and used, then employ a targeted debugging strategy with `gdb` to inspect critical points in the code.",
    "0intercode-msc-challenge_25.json": "Always verify and debug script contents step-by-step using `echo` commands to ensure each line is correctly interpreted and added before executing the script.",
    "0intercode-msc-challenge_33.json": "Use modular code creation and execution to systematically implement and test solutions, ensuring each step is clearly defined and tool usage is explicitly invoked to avoid script creation failures and maximize round efficiency.",
    "0intercode-rev-challenge_78.json": "Always ensure scripts are correctly formatted and that command-line arguments are properly passed to avoid issues with `stdin` and shebang lines.",
    "0intercode-cry-challenge_73.json": "When faced with a one-time pad challenge, manually perform XOR operations between the encrypted flag and each ciphertext to identify patterns, ensuring correct handling of byte lengths and formats to avoid errors and promote varied exploration.",
    "0intercode-rev-challenge_84.json": "Employ a multi-step simulation approach with detailed logging and verification to ensure all conditional branches and function calls are accurately captured and handled.",
    "0intercode-for-challenge_87.json": "Always use `pwntools` to generate and analyze patterns for determining buffer overflow offsets, and ensure interactive input sessions are captured in the tool calls to avoid manual errors and maximize efficiency.",
    "0intercode-cry-challenge_79.json": "When faced with a repeated failure in parsing or using files in a cryptography challenge, ensure the agent uses tools like `run_command` to verify file contents and `createfile` to correctly format and execute scripts, while exploring alternative parsing methods and libraries if necessary.",
    "0intercode-cry-challenge_80.json": "When decrypting messages with a classical cipher, implement a final verification step to manually correct any discrepancies in the decrypted text, especially for the last characters, and ensure the flag format matches the expected pattern.",
    "0intercode-for-challenge_2.json": "When encountering lock issues or timeouts during package installations, first run `sudo dpkg --configure -a` to resolve interrupted installations, then use `DEBIAN_FRONTEND=noninteractive` to bypass interactive prompts, and explore multiple protocols and TCP streams in the `.pcap` file for hidden flags.",
    "0intercode-msc-challenge_39.json": "Always use non-blocking sockets and immediate response handling to ensure quick communication with the server in CTF challenges, and verify all string literals for proper termination to avoid syntax errors.",
    "0intercode-rev-challenge_82.json": "Always simulate and verify the function's behavior with smaller inputs before applying the logic to larger inputs, and consider using a tool that supports the target architecture if manual calculations or emulators fail.",
    "0intercode-web-challenge_16.json": "When constructing a flag from comments in web files, use `xxd` to inspect the raw bytes of the comments for any hidden or unexpected characters, and ensure that the final flag format strictly matches the required `picoCTF{...}` structure without any additional symbols.",
    "0intercode-cry-challenge_56.json": "When encountering installation timeouts or lock issues, prioritize breaking down installations into smaller steps and using `lsof` and `killall` to manage and terminate conflicting processes before proceeding, while also considering alternative tools like `xxd` for hex analysis if standard steganography tools fail to yield results.",
    "0intercode-msc-challenge_28.json": "When a network service is consistently refusing connections, attempt to scan for open ports and explore other services or endpoints, as the flag might be accessible through a different port or method.",
    "0intercode-rev-challenge_83.json": "Always verify the target architecture and use the appropriate cross-compilation tools and libraries, ensuring that all dependencies are correctly installed and linked before running the binary or checking the flag.",
    "0intercode-rev-challenge_85.json": "When reversing scrambled values, precompute and verify all possible scrambled values for the block length to ensure the reverse lookup dictionary is comprehensive and avoids infinite loops or timeouts.",
    "0intercode-cry-challenge_12.json": "When facing a CTF RSA challenge with a large public exponent like 65537 and no immediate success with factorization or brute force, explore alternative mathematical insights such as checking for simple ASCII messages or using known attacks like Common Modulus Attack if multiple ciphertexts are available, while avoiding repeated timeouts by testing with incremental limits.",
    "0intercode-for-challenge_70.json": "When encountering ambiguous or indirect clues in a forensics challenge, use a combination of `grep` with regular expressions to search for specific keywords or patterns across all extracted files, promoting varied exploration without missing critical information.",
    "0intercode-rev-challenge_15.json": "When encountering a decoded string that does not directly match the expected flag format, systematically generate and check potential flags by substituting and rearranging parts of the string while also exploring alternative decoding methods or context clues within the code.",
    "0intercode-msc-challenge_42.json": "Always examine the potential for input validation vulnerabilities and integer overflows when analyzing CTF challenges involving user input, and consider diverse exploitation techniques beyond typical usage.",
    "0intercode-rev-challenge_43.json": "Always perform a detailed dynamic analysis using `gdb` to identify runtime behavior and potential vulnerabilities in the binary, complementing static source code analysis.",
    "0intercode-cry-challenge_74.json": "When creating files with multi-line scripts, use `printf` with explicit newline characters (`\\\\n`) to ensure proper formatting and avoid syntax errors due to incorrect line handling. Additionally, verify the alignment and length of the key and encrypted message to ensure correct decryption.",
    "0intercode-rev-challenge_76.json": "When encountering persistent assembly syntax errors with `push` and `pop` instructions, verify and manually correct the syntax to ensure proper use of AT&T conventions and explicitly specify the `.section .text` directive to define the code section. Additionally, ensure all labels and jumps are correctly aligned and formatted.",
    "0intercode-pwn-challenge_88.json": "Always systematically test extreme and unusual input values, including very large numbers, negative numbers, and non-numeric characters, to uncover hidden vulnerabilities in user input handling functions.",
    "0intercode-pwn-challenge_62.json": "Always systematically increase the scope of memory leaks using format specifiers and inspect the converted ASCII output for recognizable patterns, such as the flag format, while avoiding potentially crashing the server by using safe format specifiers.\n\nThis rule encourages the agent to explore a wider range of memory offsets and to use safer methods to convert and inspect the leaked data, helping to avoid repeating mistakes like causing a core dump.",
    "0intercode-cry-challenge_93.json": "When faced with a large number of permutations in a cryptography challenge, prioritize manual inspection and heuristic methods like using a dictionary of valid words to guide the permutation process, rather than exhaustively checking all permutations.",
    "0intercode-rev-challenge_51.json": "When encountering reverse engineering challenges, implement a systematic approach to reverse the scrambling logic by writing and testing small segments of code incrementally, verify each step, and use debugging tools to ensure accuracy and avoid timeouts during network-dependent operations.",
    "0intercode-cry-challenge_55.json": "When encountering steganography challenges with hidden data, systematically explore multiple encoding schemes and combinations, and use alternative tools or methods if initial attempts fail.",
    "0intercode-msc-challenge_29.json": "When faced with a hashing challenge that does not yield results with standard common phrases and algorithms, systematically explore variations in input, including appending common suffixes and delimiters, and test with different character cases to ensure diverse exploration and avoid repeating unsuccessful strategies.",
    "0intercode-rev-challenge_10.json": "When encountering issues with automated tool commands, manually execute the tools in interactive mode and carefully analyze the output to identify the correct approach for reversing the transformation logic.",
    "0intercode-for-challenge_66.json": "When a remote service connection is repeatedly refused, consider verifying the server's availability and exploring alternative connection methods or formats, while also implementing robust error handling and debugging in scripts to ensure data is transmitted correctly.",
    "0intercode-for-challenge_94.json": "When encountering timeouts during brute-force attempts, switch to a more efficient or varied method of hidden data extraction, such as using `stegosuite` for a graphical interface or combining multiple steganography tools with different capabilities.",
    "0intercode-rev-challenge_81.json": "When encountering architecture-specific assembly code that cannot be compiled in the current environment, simulate the logic using a high-level language to ensure accurate interpretation and avoid redundant compilation attempts.",
    "0intercode-for-challenge_3.json": "When encountering a binary sequence derived from whitespace characters that doesn't fit standard byte boundaries, explore grouping the binary data into different chunk sizes (e.g., 5, 6, 7, or 9 bits) and attempt decoding with various encoding schemes (e.g., Base32, ASCII, or custom binary-to-character mappings) to identify a meaningful pattern.",
    "0intercode-for-challenge_71.json": "When encountering a base64 encoded string with repeated patterns, attempt to identify unique substrings or non-repeated sequences and decode them separately to reveal the flag, ensuring varied exploration of potential flag formats.",
    "0intercode-rev-challenge_13.json": "Ensure the constructed key is exactly 43 characters long before base64 encoding to match the 32-byte requirement for Fernet encryption, and verify the key format by attempting decryption with the correctly encoded key.",
    "0intercode-for-challenge_59.json": "When encountering ambiguous clues in a CTF challenge, systematically explore all possible interpretations and encoding variations of the available data, while also considering indirect clues from related metadata, to avoid repetitive failure patterns and promote diverse exploration.",
    "0intercode-pwn-challenge_89.json": "Continuously adjust the seed prediction range and explore alternative inputs to ensure successful exploitation of time-based vulnerabilities, while logging and reviewing each attempt to refine the strategy.\n\nThis rule encourages the agent to dynamically adjust its approach based on real-time feedback, promoting exploration of different inputs and strategies, and ensuring that it learns from failed attempts to avoid repeating mistakes.",
    "0intercode-msc-challenge_38.json": "When faced with large zip files in CTF challenges, use `unzip -p` to extract individual files directly into a search command to avoid timeouts and efficiently locate the flag.",
    "0intercode-cry-challenge_95.json": "When faced with a non-responsive server in a CTF challenge, simulate the server's behavior locally using zlib compression to deduce the flag content by analyzing the lengths of the compressed outputs for varied inputs.",
    "0intercode-cry-challenge_86.json": "When faced with a computationally expensive brute force task, use process-based parallelization with `concurrent.futures.ProcessPoolExecutor` to efficiently explore the key space and avoid timeouts."
}